import streamlit as st
import pyodbc

with open("assets/style.css") as f:
    st.markdown(f"<style>{f.read()}</style>", unsafe_allow_html=True)
    
    # Estiliza√ß√£o da barra lateral
st.markdown("""
    <style>
        [data-testid="stSidebar"] {
            background-color: #1f2937;
            color: white;
        }
        [data-testid="stSidebar"] h2 {
            color: #10b981;
        }
        [data-testid="stSidebar"] .stButton button {
            background-color: #10b981;
            color: white;
        }
    </style>
""", unsafe_allow_html=True)

# Barra lateral personalizada
with st.sidebar:
    st.markdown("## üß≠ Navega√ß√£o")
    if st.button("ü§ñ Ir para Chatbot"):
        st.switch_page("pages/chatbot.py")
    if st.button("ü§ñ Ir para Cadastrar_Quest√µes"):
        st.switch_page("pages/Cadastrar_Quest√µes.py")
    if st.button("ü§ñ Ir para Gerar_Simulado"):
        st.switch_page("pages/Gerar_Simulado.py")
    if st.button("ü§ñ Ir para conn_azure"):
        st.switch_page("pages/conn_azure.py")
    
    if st.button("ü§ñ Retornar"):
        st.switch_page("gemini.py")
    

    st.markdown("---")
    st.markdown("## ‚öôÔ∏è Configura√ß√µes")
    st.selectbox("Modo de exibi√ß√£o", ["Claro", "Escuro", "Autom√°tico"])
    st.slider("Sensibilidade do modelo", 0.0, 1.0, 0.5)

    st.markdown("---")
    st.markdown("### üìû Suporte")
    st.write("Email: suporte@meuapp.com")
    
# Fun√ß√£o de conex√£o
def conectar_banco():
    try:
        conexao = pyodbc.connect(
            "DRIVER={ODBC Driver 17 for SQL Server};"
            "SERVER=myfreesqldbserver-0101.database.windows.net;"
            "DATABASE=myFreeDB;"
            "UID=ivan;"
            "PWD=MigMat01#!;"
            "Encrypt=yes;"
            "TrustServerCertificate=no;"
            "Connection Timeout=30;"
        )
        return conexao
    except Exception as erro:
        st.error(f"‚ùå Erro ao conectar: {erro}")
        return None

# Executando dentro do Streamlit
def executar_insert():
    conexao = conectar_banco()
    if conexao:
        try:
            cursor = conexao.cursor()
            sql = "INSERT INTO [dbo].[SimuladoPerguntas] ([pergunta], [FK_MODULO]) VALUES ('quem descobriu a beringela', 1010);"
            cursor.execute(sql)
            conexao.commit()
            st.success("‚úÖ INSERT executado com sucesso!")

            # Verificando se foi inserido
            cursor.execute("SELECT top 1 * FROM [dbo].[SimuladoPerguntas] order by id desc")
            resultado = cursor.fetchone()
            if resultado:
                st.write("üìå Resultado do SELECT:")
                st.write(resultado)
            else:
                st.warning("‚ö†Ô∏è Nenhum registro encontrado com id = 100")

        except Exception as erro:
            st.error(f"‚ùå Erro ao executar SQL: {erro}")
        finally:
            cursor.close()
            conexao.close()

# Bot√£o para executar
if st.button("Executar INSERT"):
    executar_insert()
   
# Interface Streamlit
st.set_page_config(page_title="Conex√£o com Banco", page_icon="üóÑÔ∏è", layout="centered")
st.title("üóÑÔ∏è Conex√£o com SQL Server")

st.markdown("Clique no bot√£o abaixo para conectar e listar as tabelas dispon√≠veis:")

if st.button("üîå Conectar ao Banco"):
    conexao = conectar_banco()
    
    if conexao:
        st.success("‚úÖ Conex√£o bem-sucedida com o banco de dados!")
        try:
            cursor = conexao.cursor()
            cursor.execute("SELECT name FROM sys.tables")
            tabelas = cursor.fetchall()

            if tabelas:
                st.subheader("üìÇ Tabelas encontradas:")
                for tabela in tabelas:
                    st.markdown(f"- **{tabela.name}**")

                # Gera√ß√£o de INSERT fixo
                st.subheader("üß™ Gerar um √∫nico INSERT fixo para SimuladoPerguntas")
                if st.button("üìå Gerar INSERT fixo"):
                    insert_sql = gerar_insert_fixo()
                    st.code(insert_sql, language="sql")
            else:
                st.info("Nenhuma tabela encontrada no banco.")
        except Exception as erro:
            st.error(f"Erro ao buscar dados: {erro}")
        finally:
            conexao.close()
    else:
        st.warning("N√£o foi poss√≠vel estabelecer conex√£o.")