# app.py
import streamlit as st
from db_connection import DatabaseConnection

# üîß Estilo personalizado
with open("assets/style.css") as f:
    st.markdown(f"<style>{f.read()}</style>", unsafe_allow_html=True)

st.set_page_config(page_title="üìö CRUD Simulado", layout="wide")
st.title("üìö Gerenciador de Perguntas do Simulado")

# Estiliza√ß√£o da barra lateral
st.markdown("""
    <style>
        [data-testid="stSidebar"] {
           background: linear-gradient( #000000, #0000004c, #06080075);
           color: white;
           box-shadow: 0 0 10px rgba(0,0,0,0.5);
           padding: 20px;
           border-radius: 10px;
        }
       
        [data-testid="stSidebar"] {
           height: 100vh;
        overflow-y: auto;
}

        [data-testid="stSidebar"] h2 {
            color: #10b981;
        }
        [data-testid="stSidebar"] .stButton button {
           background-color: #0000004c;
           color: rgba(245, 245, 245, 0.849);
           text-align: left;
           padding-left: 12px;
           width: 240px;
           height: 40px;
           border: none;
           border-radius: 8px;
           font-size: 18px;
           font-weight: bold;
           box-shadow: 0 4px 6px rgba(0,0,0,0.1);
           cursor: pointer;
           transition: background-color 0.3s ease-in-out;
           display: flex;
           justify-content: flex-start;   /* Alinha conte√∫do √† esquerda */
           align-items: center;           /* Centraliza verticalmente */
           padding-left: 12px;            /* Espa√ßo interno √† esquerda */
           text-align: left;              /* Redundante, mas seguro */
        }
    </style>
""", unsafe_allow_html=True)

# üß≠ Barra lateral personalizada
with st.sidebar:
    st.markdown("## üß≠ Navega√ß√£o")
    if st.button("üéì¬†¬†¬†Chatbot", key="btn_chatbot"):
       st.switch_page("pages/chatbot.py")
    if st.button("üñ•Ô∏è¬†¬†¬†Gerar Simulado", key="btn_simulado"):
        st.switch_page("pages/Gerar_Simulado.py")
    if st.button("‚úÖ¬†¬†¬†Teste de Conex√£o", key="btn_azure"):
        st.switch_page("pages/conn_azure.py")
    if st.button("‚Ü©Ô∏è¬†¬†¬†Retornar", key="btn_retornar"):
        st.switch_page("gemini.py")
    st.markdown("---")
    st.markdown("## ‚öôÔ∏è¬†¬†¬†Cadastro")
    if st.button("üóÇÔ∏è¬†¬†¬†Quest√µes", key="btn_cadastrar"):
        st.switch_page("pages/Cadastrar_Quest√µes.py")
    if st.button("üóÇÔ∏è¬†¬†¬†Respostas", key="btn_cadastrar_respostas"):
        st.switch_page("pages/Cadastrar_Respostas.py")
        st.markdown("---")
    
    st.markdown("---")
    st.markdown("### üìû¬†¬†¬†Suporte")
    st.write("Email: suporte@meuapp.com")

# üîå Conex√£o com o banco
db = DatabaseConnection()
db.connect()

# üîç Filtro por m√≥dulo
modulo_filtro = st.sidebar.number_input("üîé Filtrar por m√≥dulo", min_value=0, step=1, key="modulo_filtro")
if modulo_filtro > 0:
    perguntas = db.get_perguntas(modulo_filtro)
else:
    perguntas = db.get_perguntas()

# üìã Visualiza√ß√£o das perguntas
st.subheader("üìã Perguntas cadastradas")

if perguntas and len(perguntas) > 0:
   for row in perguntas:
    codigo = row['CO_PERGUNTA']
    descricao = row['DE_PERGUNTA']

    codigo_formatado = codigo.strip() if codigo else "Sem c√≥digo"
    descricao_formatada = descricao.strip() if descricao else "Sem descri√ß√£o"

    with st.expander(f"ID {row['PK_CO_PERGUNTA']} - C√≥digo {codigo_formatado}"):
        st.write(descricao_formatada)
        col1, col2 = st.columns(2)
        with col1:
            if st.button(f"‚úèÔ∏è Editar {row['PK_CO_PERGUNTA']}", key=f"editar_{row['PK_CO_PERGUNTA']}"):
                st.session_state["edit_id"] = row['PK_CO_PERGUNTA']
                st.session_state["edit_codigo"] = codigo_formatado
                st.session_state["edit_descricao"] = descricao_formatada
        with col2:
            if st.button(f"‚ùå Excluir {row['PK_CO_PERGUNTA']}", key=f"excluir_{row['PK_CO_PERGUNTA']}"):
                db.delete_pergunta(row['PK_CO_PERGUNTA'])
                st.success(f"Pergunta {row['PK_CO_PERGUNTA']} exclu√≠da.")
                st.rerun()
else:
    st.warning("‚ö†Ô∏è Nenhuma pergunta encontrada para o filtro atual.")

# ‚ûï Formul√°rio de edi√ß√£o/inser√ß√£o
st.subheader("‚ûï Adicionar ou Editar Pergunta")
with st.form("form_crud"):
    id_edicao = st.session_state.get("edit_id", None)
    codigo_input = st.text_input("Pergunta", value=st.session_state.get("edit_codigo", ""))
    descricao_input = st.text_area("Texto", value=st.session_state.get("edit_descricao", ""))
    
    enviar = st.form_submit_button("üíæ Salvar")

if enviar:
    if not codigo_input.strip() or not descricao_input.strip():
        st.warning("‚ö†Ô∏è C√≥digo e descri√ß√£o n√£o podem estar vazios.")
    else:
        if id_edicao:
            db.update_pergunta(id_edicao, codigo_input, descricao_input)
            st.success("‚úÖ Pergunta atualizada com sucesso!")
            st.session_state["edit_id"] = None
        else:
            db.insert_pergunta(codigo_input, descricao_input)
            st.success("‚úÖ Pergunta adicionada com sucesso!")
        st.session_state["edit_codigo"] = ""
        st.session_state["edit_descricao"] = ""
        st.rerun()

# üîí Encerrando conex√£o
db.close()